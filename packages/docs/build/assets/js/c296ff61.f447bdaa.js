"use strict";(self.webpackChunknext_auth_docs=self.webpackChunknext_auth_docs||[]).push([[9972],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=u(n),d=r,h=m["".concat(l,".").concat(d)]||m[d]||c[d]||o;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8215:function(e,t,n){var a=n(7294);t.Z=function(e){var t=e.children,n=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:r},t)}},6396:function(e,t,n){n.d(t,{Z:function(){return m}});var a=n(7462),r=n(7294),o=n(2389),i=n(9443);var s=function(){var e=(0,r.useContext)(i.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},l=n(9521),u=n(6010),p="tabItem_vU9c";function c(e){var t,n,a,o=e.lazy,i=e.block,c=e.defaultValue,m=e.values,d=e.groupId,h=e.className,y=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),g=null!=m?m:y.map((function(e){var t=e.props;return{value:t.value,label:t.label}})),f=(0,l.lx)(g,(function(e,t){return e.value===t.value}));if(f.length>0)throw new Error('Docusaurus error: Duplicate values "'+f.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var v=null===c?c:null!=(t=null!=c?c:null==(n=y.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(a=y[0])?void 0:a.props.value;if(null!==v&&!g.some((function(e){return e.value===v})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+v+'" but none of its children has the corresponding value. Available values are: '+g.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var k=s(),b=k.tabGroupChoices,N=k.setTabGroupChoices,w=(0,r.useState)(v),x=w[0],C=w[1],T=[],O=(0,l.o5)().blockElementScrollPositionUntilNextRender;if(null!=d){var M=b[d];null!=M&&M!==x&&g.some((function(e){return e.value===M}))&&C(M)}var E=function(e){var t=e.currentTarget,n=T.indexOf(t),a=g[n].value;a!==x&&(O(t),C(a),null!=d&&N(d,a))},j=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a=T.indexOf(e.currentTarget)+1;n=T[a]||T[0];break;case"ArrowLeft":var r=T.indexOf(e.currentTarget)-1;n=T[r]||T[T.length-1]}null==(t=n)||t.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,u.Z)("tabs",{"tabs--block":i},h)},g.map((function(e){var t=e.value,n=e.label;return r.createElement("li",{role:"tab",tabIndex:x===t?0:-1,"aria-selected":x===t,className:(0,u.Z)("tabs__item",p,{"tabs__item--active":x===t}),key:t,ref:function(e){return T.push(e)},onKeyDown:j,onFocus:E,onClick:E},null!=n?n:t)}))),o?(0,r.cloneElement)(y.filter((function(e){return e.props.value===x}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},y.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==x})}))))}function m(e){var t=(0,o.Z)();return r.createElement(c,(0,a.Z)({key:String(t)},e))}},9443:function(e,t,n){var a=(0,n(7294).createContext)(void 0);t.Z=a},9616:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return u},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return m},default:function(){return h}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=n(6396),s=n(8215),l=["components"],u={id:"typeorm",title:"TypeORM"},p="TypeORM",c={unversionedId:"adapters/typeorm",id:"adapters/typeorm",isDocsHomePage:!1,title:"TypeORM",description:"This Adapter is used to support SQL-flavored databases (like SQLite, MySQL, MSSQL, MariaDB, CockroachDB, etc.) through TypeORM, and mostly kept around for legacy reasons. (See the warning below.)",source:"@site/docs/adapters/typeorm.md",sourceDirName:"adapters",slug:"/adapters/typeorm",permalink:"/adapters/typeorm",editUrl:"https://github.com/nextauthjs/docs/edit/main/docs/adapters/typeorm.md",tags:[],version:"current",lastUpdatedBy:"Bal\xe1zs Orb\xe1n",lastUpdatedAt:1643982356,formattedLastUpdatedAt:"2/4/2022",frontMatter:{id:"typeorm",title:"TypeORM"},sidebar:"docs",previous:{title:"Neo4j",permalink:"/adapters/neo4j"},next:{title:"Sequelize",permalink:"/adapters/sequelize"}},m=[{value:"Usage",id:"usage",children:[],level:2},{value:"Custom models",id:"custom-models",children:[],level:2},{value:"Naming Conventions",id:"naming-conventions",children:[],level:2}],d={toc:m};function h(e){var t=e.components,n=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"typeorm"},"TypeORM"),(0,o.kt)("p",null,"This Adapter is used to support SQL-flavored databases (like SQLite, MySQL, MSSQL, MariaDB, CockroachDB, etc.) through ",(0,o.kt)("a",{parentName:"p",href:"https://typeorm.io"},"TypeORM"),", and mostly kept around for legacy reasons. (See the warning below.)"),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"If you previously used this Adapter with MongoDB, check out the ",(0,o.kt)("a",{parentName:"p",href:"/adapters/mongodb"},"MongoDB Adapter")," instead."))),(0,o.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"In the future, we might split up this adapter to support single flavors of SQL for easier maintenance and reduced bundle size."))),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"To use this Adapter, you need to install the following packages:"),(0,o.kt)(i.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"npm",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm install next-auth @next-auth/typeorm-legacy-adapter typeorm\n"))),(0,o.kt)(s.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add next-auth @next-auth/typeorm-legacy-adapter typeorm\n")))),(0,o.kt)("p",null,"Configure your NextAuth.js to use the TypeORM Adapter:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="pages/api/auth/[...nextauth].js"',title:'"pages/api/auth/[...nextauth].js"'},'import NextAuth from "next-auth"\nimport { TypeORMLegacyAdapter } from "@next-auth/typeorm-legacy-adapter"\n\n\nexport default NextAuth({\n  adapter: TypeORMLegacyAdapter("yourconnectionstring"),\n  ...\n})\n')),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"TypeORMLegacyAdapter")," takes either a connection string, or a ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/typeorm/typeorm/blob/master/docs/connection-options.md"},(0,o.kt)("inlineCode",{parentName:"a"},"ConnectionOptions"))," object as its first parameter."),(0,o.kt)("h2",{id:"custom-models"},"Custom models"),(0,o.kt)("p",null,"The TypeORM adapter uses ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/typeorm/typeorm/blob/master/docs/entities.md"},(0,o.kt)("inlineCode",{parentName:"a"},"Entity")," classes")," to define the shape of your data."),(0,o.kt)("p",null,"If you want to override the default entities (for example to add a ",(0,o.kt)("inlineCode",{parentName:"p"},"role")," field to your ",(0,o.kt)("inlineCode",{parentName:"p"},"UserEntity"),"), you will have to do the following:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"create a file containing your modified entities:")),(0,o.kt)("p",null,"(The file below is based on the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nextauthjs/adapters/blob/next/packages/typeorm-legacy/src/entities.ts"},"default entities"),")"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="lib/entities.ts"',title:'"lib/entities.ts"'},'import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  OneToMany,\n  ValueTransformer,\n} from "typeorm"\n\nconst transformer: Record<"date" | "bigint", ValueTransformer> = {\n  date: {\n    from: (date: string | null) => date && new Date(parseInt(date, 10)),\n    to: (date?: Date) => date?.valueOf().toString(),\n  },\n  bigint: {\n    from: (bigInt: string | null) => bigInt && parseInt(bigInt, 10),\n    to: (bigInt?: number) => bigInt?.toString(),\n  },\n}\n\n@Entity({ name: "users" })\nexport class UserEntity {\n  @PrimaryGeneratedColumn("uuid")\n  id!: string\n\n  @Column({ type: "varchar", nullable: true })\n  name!: string | null\n\n  @Column({ type: "varchar", nullable: true, unique: true })\n  email!: string | null\n\n  @Column({ type: "varchar", nullable: true, transformer: transformer.date })\n  emailVerified!: string | null\n\n  @Column({ type: "varchar", nullable: true })\n  image!: string | null\n\n+ @Column({ type: "varchar", nullable: true })\n+ role!: string | null\n\n  @OneToMany(() => SessionEntity, (session) => session.userId)\n  sessions!: SessionEntity[]\n\n  @OneToMany(() => AccountEntity, (account) => account.userId)\n  accounts!: AccountEntity[]\n}\n\n@Entity({ name: "accounts" })\nexport class AccountEntity {\n  @PrimaryGeneratedColumn("uuid")\n  id!: string\n\n  @Column({ type: "uuid" })\n  userId!: string\n\n  @Column()\n  type!: string\n\n  @Column()\n  provider!: string\n\n  @Column()\n  providerAccountId!: string\n\n  @Column({ type: "varchar", nullable: true })\n  refresh_token!: string\n\n  @Column({ type: "varchar", nullable: true })\n  access_token!: string | null\n\n  @Column({\n    nullable: true,\n    type: "bigint",\n    transformer: transformer.bigint,\n  })\n  expires_at!: number | null\n\n  @Column({ type: "varchar", nullable: true })\n  token_type!: string | null\n\n  @Column({ type: "varchar", nullable: true })\n  scope!: string | null\n\n  @Column({ type: "varchar", nullable: true })\n  id_token!: string | null\n\n  @Column({ type: "varchar", nullable: true })\n  session_state!: string | null\n\n  @Column({ type: "varchar", nullable: true })\n  oauth_token_secret!: string | null\n\n  @Column({ type: "varchar", nullable: true })\n  oauth_token!: string | null\n\n  @ManyToOne(() => UserEntity, (user) => user.accounts, {\n    createForeignKeyConstraints: true,\n  })\n  user!: UserEntity\n}\n\n@Entity({ name: "sessions" })\nexport class SessionEntity {\n  @PrimaryGeneratedColumn("uuid")\n  id!: string\n\n  @Column({ unique: true })\n  sessionToken!: string\n\n  @Column({ type: "uuid" })\n  userId!: string\n\n  @Column({ transformer: transformer.date })\n  expires!: string\n\n  @ManyToOne(() => UserEntity, (user) => user.sessions)\n  user!: UserEntity\n}\n\n@Entity({ name: "verification_tokens" })\nexport class VerificationTokenEntity {\n  @PrimaryGeneratedColumn("uuid")\n  id!: string\n\n  @Column()\n  token!: string\n\n  @Column()\n  identifier!: string\n\n  @Column({ transformer: transformer.date })\n  expires!: string\n}\n')),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Pass them to ",(0,o.kt)("inlineCode",{parentName:"li"},"TypeORMLegacyAdapter"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="pages/api/auth/[...nextauth].js"',title:'"pages/api/auth/[...nextauth].js"'},'import NextAuth from "next-auth"\nimport { TypeORMLegacyAdapter } from "@next-auth/typeorm-legacy-adapter"\nimport * as entities from "lib/entities"\n\nexport default NextAuth({\n  adapter: TypeORMLegacyAdapter("yourconnectionstring", { entities }),\n  ...\n})\n')),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Synchronize your database \u267b")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"synchronize: true")," option in TypeORM will generate SQL that exactly matches the entities. This will automatically apply any changes it finds in the entity model. This is a useful option in development."))),(0,o.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"Using synchronize in production")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},(0,o.kt)("inlineCode",{parentName:"p"},"synchronize: true")," should not be enabled against production databases as it may cause data loss if the configured schema does not match the expected schema! We recommend that you synchronize/migrate your production database at build-time."))),(0,o.kt)("h2",{id:"naming-conventions"},"Naming Conventions"),(0,o.kt)("p",null,"If mixed snake_case and camelCase column names are an issue for you and/or your underlying database system, we recommend using TypeORM's naming strategy feature to change the target field names. There is a package called ",(0,o.kt)("inlineCode",{parentName:"p"},"typeorm-naming-strategies")," which includes a ",(0,o.kt)("inlineCode",{parentName:"p"},"snake_case")," strategy which will translate the fields from how NextAuth.js expects them, to snake_case in the actual database."),(0,o.kt)("p",null,"For example, you can add the naming convention option to the connection object in your NextAuth config."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="pages/api/auth/[...nextauth].js"',title:'"pages/api/auth/[...nextauth].js"'},'import NextAuth from "next-auth"\nimport { TypeORMLegacyAdapter } from "@next-auth/typeorm-legacy-adapter"\nimport { SnakeNamingStrategy } from \'typeorm-naming-strategies\'\nimport { ConnectionOptions } from "typeorm"\n\nconst connection: ConnectionOptions = {\n    type: "mysql",\n    host: "localhost",\n    port: 3306,\n    username: "test",\n    password: "test",\n    database: "test",\n    namingStrategy: new SnakeNamingStrategy()\n}\n\nexport default NextAuth({\n  adapter: TypeORMLegacyAdapter(connection),\n  ...\n})\n')))}h.isMDXComponent=!0}}]);