"use strict";(self.webpackChunknext_auth_docs=self.webpackChunknext_auth_docs||[]).push([[8644],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return l}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),m=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):d(d({},t),e)),n},p=function(e){var t=m(e.components);return a.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=m(n),l=r,f=c["".concat(o,".").concat(l)]||c[l]||u[l]||i;return n?a.createElement(f,d(d({ref:t},p),{},{components:n})):a.createElement(f,d({ref:t},p))}));function l(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,d=new Array(i);d[0]=c;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,d[1]=s;for(var m=2;m<i;m++)d[m]=n[m];return a.createElement.apply(null,d)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},3836:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return o},metadata:function(){return m},toc:function(){return p},default:function(){return c}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),d=["components"],s={id:"prisma",title:"Prisma Adapter"},o="Prisma",m={unversionedId:"adapters/prisma",id:"version-v3/adapters/prisma",isDocsHomePage:!1,title:"Prisma Adapter",description:"You can also use NextAuth.js with the new experimental Adapter for Prisma. This version of the Prisma Adapter is not included in the core next-auth package, and must be installed separately.",source:"@site/versioned_docs/version-v3/adapters/prisma.md",sourceDirName:"adapters",slug:"/adapters/prisma",permalink:"/v3/adapters/prisma",editUrl:"https://github.com/nextauthjs/docs/edit/main/versioned_docs/version-v3/adapters/prisma.md",tags:[],version:"v3",lastUpdatedBy:"Bal\xe1zs Orb\xe1n",lastUpdatedAt:1643982356,formattedLastUpdatedAt:"2/4/2022",frontMatter:{id:"prisma",title:"Prisma Adapter"},sidebar:"version-v3/docs",previous:{title:"FaunaDB Adapter",permalink:"/v3/adapters/fauna"},next:{title:"Prisma Adapter (Legacy)",permalink:"/v3/adapters/prisma-legacy"}},p=[{value:"Setup",id:"setup",children:[{value:"Generate Client",id:"generate-client",children:[],level:3}],level:2},{value:"Schema History",id:"schema-history",children:[],level:2}],u={toc:p};function c(e){var t=e.components,n=(0,r.Z)(e,d);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"prisma"},"Prisma"),(0,i.kt)("p",null,"You can also use NextAuth.js with the new experimental Adapter for ",(0,i.kt)("a",{parentName:"p",href:"https://www.prisma.io/docs/"},"Prisma"),". This version of the Prisma Adapter is not included in the core ",(0,i.kt)("inlineCode",{parentName:"p"},"next-auth")," package, and must be installed separately."),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"You may have noticed there is a ",(0,i.kt)("inlineCode",{parentName:"p"},"prisma")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"prisma-legacy")," adapter. This is due to historical reasons, but the code has mostly converged so that there is no longer much difference between the two. The legacy adapter, however, does have the ability to rename tables which the newer version does not."))),(0,i.kt)("p",null,"To use this Adapter, you need to install Prisma Client, Prisma CLI, and the separate ",(0,i.kt)("inlineCode",{parentName:"p"},"@next-auth/prisma-adapter@canary")," package:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"npm install @prisma/client @next-auth/prisma-adapter@canary\nnpm install prisma --save-dev\n")),(0,i.kt)("p",null,"Configure your NextAuth.js to use the Prisma Adapter:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="pages/api/auth/[...nextauth].js"',title:'"pages/api/auth/[...nextauth].js"'},'import NextAuth from "next-auth"\nimport Providers from "next-auth/providers"\nimport { PrismaAdapter } from "@next-auth/prisma-adapter"\nimport { PrismaClient } from "@prisma/client"\n\nconst prisma = new PrismaClient()\n\nexport default NextAuth({\n  providers: [\n    Providers.Google({\n      clientId: process.env.GOOGLE_CLIENT_ID,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n    }),\n  ],\n  adapter: PrismaAdapter(prisma),\n})\n')),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"While Prisma includes an experimental feature in the migration command that is able to generate SQL from a schema, creating tables and columns using the provided SQL is currently recommended instead as SQL schemas automatically generated by Prisma may differ from the recommended schemas."))),(0,i.kt)("p",null,"Schema for the Prisma Adapter (",(0,i.kt)("inlineCode",{parentName:"p"},"@next-auth/prisma-adapter"),")"),(0,i.kt)("h2",{id:"setup"},"Setup"),(0,i.kt)("p",null,"Create a schema file in ",(0,i.kt)("inlineCode",{parentName:"p"},"prisma/schema.prisma")," similar to this one:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="schema.prisma"',title:'"schema.prisma"'},'generator client {\n  provider = "prisma-client-js"\n}\n\ndatasource db {\n  provider = "sqlite"\n  url      = "file:./dev.db"\n}\n\nmodel Account {\n  id                 String    @id @default(cuid())\n  userId             String\n  providerType       String\n  providerId         String\n  providerAccountId  String\n  refreshToken       String?\n  accessToken        String?\n  accessTokenExpires DateTime?\n  createdAt          DateTime  @default(now())\n  updatedAt          DateTime  @updatedAt\n  user               User      @relation(fields: [userId], references: [id])\n\n  @@unique([providerId, providerAccountId])\n}\n\nmodel Session {\n  id           String   @id @default(cuid())\n  userId       String\n  expires      DateTime\n  sessionToken String   @unique\n  accessToken  String   @unique\n  createdAt    DateTime @default(now())\n  updatedAt    DateTime @updatedAt\n  user         User     @relation(fields: [userId], references: [id])\n}\n\nmodel User {\n  id            String    @id @default(cuid())\n  name          String?\n  email         String?   @unique\n  emailVerified DateTime?\n  image         String?\n  createdAt     DateTime  @default(now())\n  updatedAt     DateTime  @updatedAt\n  accounts      Account[]\n  sessions      Session[]\n}\n\nmodel VerificationRequest {\n  id         String   @id @default(cuid())\n  identifier String\n  token      String   @unique\n  expires    DateTime\n  createdAt  DateTime @default(now())\n  updatedAt  DateTime @updatedAt\n\n  @@unique([identifier, token])\n}\n\n')),(0,i.kt)("h3",{id:"generate-client"},"Generate Client"),(0,i.kt)("p",null,"Once you have saved your schema, use the Prisma CLI to generate the Prisma Client:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"npx prisma generate\n")),(0,i.kt)("p",null,"To configure you database to use the new schema (i.e. create tables and columns) use the ",(0,i.kt)("inlineCode",{parentName:"p"},"prisma migrate")," command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"npx prisma migrate dev\n")),(0,i.kt)("p",null,"To generate a schema in this way with the above example code, you will need to specify your database connection string in the environment variable ",(0,i.kt)("inlineCode",{parentName:"p"},"DATABASE_URL"),". You can do this by setting it in a ",(0,i.kt)("inlineCode",{parentName:"p"},".env")," file at the root of your project."),(0,i.kt)("p",null,"As this feature is experimental in Prisma, it is behind a feature flag. You should check your database schema manually after using this option. See the ",(0,i.kt)("a",{parentName:"p",href:"https://www.prisma.io/docs/"},"Prisma documentation")," for information on how to use ",(0,i.kt)("inlineCode",{parentName:"p"},"prisma migrate"),"."),(0,i.kt)("h2",{id:"schema-history"},"Schema History"),(0,i.kt)("p",null,"Changes from the original Prisma Adapter"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},' model Account {\n-  id                 Int       @default(autoincrement()) @id\n+  id                 String    @id @default(cuid())\n-  compoundId         String    @unique @map(name: "compound_id")\n-  userId             Int       @map(name: "user_id")\n+  userId             String\n+  user               User      @relation(fields: [userId], references: [id])\n-  providerType       String    @map(name: "provider_type")\n+  providerType       String\n-  providerId         String    @map(name: "provider_id")\n+  providerId         String\n-  providerAccountId  String    @map(name: "provider_account_id")\n+  providerAccountId  String\n-  refreshToken       String?   @map(name: "refresh_token")\n+  refreshToken       String?\n-  accessToken        String?   @map(name: "access_token")\n+  accessToken        String?\n-  accessTokenExpires DateTime? @map(name: "access_token_expires")\n+  accessTokenExpires DateTime?\n-  createdAt          DateTime  @default(now()) @map(name: "created_at")\n+  createdAt          DateTime  @default(now())\n-  updatedAt          DateTime  @default(now()) @map(name: "updated_at")\n+  updatedAt          DateTime  @updatedAt\n\n-  @@index([providerAccountId], name: "providerAccountId")\n-  @@index([providerId], name: "providerId")\n-  @@index([userId], name: "userId")\n-  @@map(name: "accounts")\n+  @@unique([providerId, providerAccountId])\n }\n\n model Session {\n-  id           Int      @default(autoincrement()) @id\n+  id           String   @id @default(cuid())\n-  userId       Int      @map(name: "user_id")\n+  userId       String\n+  user         User     @relation(fields: [userId], references: [id])\n   expires      DateTime\n-  sessionToken String   @unique @map(name: "session_token")\n+  sessionToken String   @unique\n-  accessToken  String   @unique @map(name: "access_token")\n+  accessToken  String   @unique\n-  createdAt    DateTime @default(now()) @map(name: "created_at")\n+  createdAt    DateTime @default(now())\n-  updatedAt    DateTime @default(now()) @map(name: "updated_at")\n+  updatedAt    DateTime @updatedAt\n-\n-  @@map(name: "sessions")\n }\n\n model User {\n-  id            Int       @default(autoincrement()) @id\n+  id            String    @id @default(cuid())\n   name          String?\n   email         String?   @unique\n-  emailVerified DateTime? @map(name: "email_verified")\n+  emailVerified DateTime?\n   image         String?\n+  accounts      Account[]\n+  sessions      Session[]\n-  createdAt     DateTime  @default(now()) @map(name: "created_at")\n+  createdAt     DateTime  @default(now())\n-  updatedAt     DateTime  @default(now()) @map(name: "updated_at")\n+  updatedAt     DateTime  @updatedAt\n\n-  @@map(name: "users")\n }\n\n model VerificationRequest {\n-  id         Int      @default(autoincrement()) @id\n+  id         String   @id @default(cuid())\n   identifier String\n   token      String   @unique\n   expires    DateTime\n-  createdAt  DateTime  @default(now()) @map(name: "created_at")\n+  createdAt  DateTime @default(now())\n-  updatedAt  DateTime  @default(now()) @map(name: "updated_at")\n+  updatedAt  DateTime @updatedAt\n\n-  @@map(name: "verification_requests")\n+  @@unique([identifier, token])\n }\n')))}c.isMDXComponent=!0}}]);